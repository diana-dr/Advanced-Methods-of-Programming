Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt bool; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt bool; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt bool; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt bool; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt bool; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt bool]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt bool]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(false), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(false), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(false), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(false), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(false), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(false), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(false), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(false), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(false), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(false), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(false), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(false), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(false), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [1])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [1])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [1])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [1])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [1])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [1])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [1])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(v1 int; (cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt int; (cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))), cnt int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(cnt = 0; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))), cnt = 0]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))))]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))), v2 int]
SymTable: {cnt->(0), v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))), v3 int]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))))]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))), new(v1, 2)]
SymTable: {cnt->(0), v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))), new(v2, 3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))), new(v3, 4)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(newBarrier(cnt, rH(v2)); (fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))), newBarrier(cnt, rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))); (fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); ))), fork((await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))); (await(cnt); (print(rH(v3)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(await(cnt); (wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); )), fork((await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(rH(v3)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(await(cnt); (wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); )), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); ), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [(print(rH(v3)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (wH(v2, rH(v2) * 10); (print(rH(v2)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: [, print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); )), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); ), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->30, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 10 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [(print(rH(v2)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: [, print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

Program state:
ID: 100 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [4, 20, 300]
FileTable: []
Heap: {1->20, 2->300, 3->4}
BarrierTable: {0->(3  [10, 1, 100])}

