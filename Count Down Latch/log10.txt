Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 0, 3, 0, int, 3, 0, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 17 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 17 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1, 3, 1, int, 3, 1, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4446 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 4446 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 5928 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 5928 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 5928 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 5928 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 11856 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 11856 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 11856 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 11856 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 5928 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 5928 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 5928 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 5928 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 11856 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 2964, int, 3, 5928, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); ))); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), fork((wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), fork((wH(v1, rH(v1) * 10); (print(rH(v1)); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(print(rH(v1)); ), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(print(rH(v1)); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [1482, 20, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); )); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))), fork((wH(v1, rH(v1) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v1, rH(v1) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); )); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), fork((wH(v2, rH(v2) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v2, rH(v2) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); )); (print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), fork((wH(v3, rH(v3) * 10); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(print(v3); (countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [(wH(v3, rH(v3) * 10); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), print(v3)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 2964 
Execution Stack: [, wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 2964 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1482 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [2, 1482, 3, 1482, int, 3, 1482, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 3); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), new(v3, 3)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), new(v3, 3)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [, fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: [, fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 4 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 4 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 4 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 4 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [, fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: [, fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 8 
Execution Stack: [(wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 8 
Execution Stack: [(wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 4 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 8 
Execution Stack: [(print(rH(v3)); (countDown(cnt); )), wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 8 
Execution Stack: [(print(rH(v3)); (countDown(cnt); )), wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->3}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: [(print(rH(v3)); (countDown(cnt); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: [(print(rH(v3)); (countDown(cnt); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: [(countDown(cnt); ), print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: [(countDown(cnt); ), print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: [(countDown(cnt); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: [(countDown(cnt); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: [, countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: [, countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 8 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 30, 8, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->30}

Program state:
ID: 1 
Execution Stack: [(v1 int; (v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))), v1 int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v2 int; (v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))))]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))), v2 int]
SymTable: {v1->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v3 int; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))))]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))), v3 int]
SymTable: {v1->(int, 0), v2->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))))]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))), new(v1, 2)]
SymTable: {v1->(int, 0), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v2, 3); (new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))))]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))), new(v2, 3)]
SymTable: {v1->(int, 1), v2->(int, 0), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(new(v3, 4); (newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))), new(v3, 4)]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 0)}
Output List: []
FileTable: []
Heap: {1->2, 2->3}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(newLatch(cnt, rH(v2)); (fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); ))))), newLatch(cnt, rH(v2))]
SymTable: {v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))); (await(cnt); (print(100); (countDown(cnt); (print(100); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); )))), fork((wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(await(cnt); (print(100); (countDown(cnt); (print(100); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(wH(v1, rH(v1) * 10); (print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))), wH(v1, rH(v1) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->2, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(print(rH(v1)); (countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )), print(rH(v1))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: []
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(countDown(cnt); (fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [(fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [, fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: [, fork((wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4 
Execution Stack: [(wH(v2, rH(v2) * 10); (print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 2 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 4 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))), wH(v2, rH(v2) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->3, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(print(rH(v2)); (countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )), print(rH(v2))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(countDown(cnt); (fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [(fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [, fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: [, fork((wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); ))))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 8 
Execution Stack: [(wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 8 
Execution Stack: [(wH(v3, rH(v3) * 10); (print(rH(v3)); (countDown(cnt); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 4 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 8 
Execution Stack: [(print(rH(v3)); (countDown(cnt); )), wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 8 
Execution Stack: [(print(rH(v3)); (countDown(cnt); )), wH(v3, rH(v3) * 10)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->4}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: [(print(rH(v3)); (countDown(cnt); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: [(print(rH(v3)); (countDown(cnt); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: [(countDown(cnt); ), print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: [(countDown(cnt); ), print(rH(v3))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: [(countDown(cnt); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: [(countDown(cnt); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: [, countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: [, countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); ))), await(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 8 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); (countDown(cnt); (print(100); )))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); )), print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(countDown(cnt); (print(100); ))]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); ), countDown(cnt)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [(print(100); )]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: [, print(100)]
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

Program state:
ID: 1 
Execution Stack: []
SymTable: {cnt->(0), v1->(int, 1), v2->(int, 2), v3->(int, 3)}
Output List: [20, 2, 30, 4, 40, 8, 100, 100]
FileTable: []
Heap: {1->20, 2->30, 3->40}

