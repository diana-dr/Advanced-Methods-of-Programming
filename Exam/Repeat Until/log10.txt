Program state:
ID: 1 
Execution Stack: [(v int; (x int; (repeat fork((print(v); (v = v - 1; ))) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat fork((print(v); (v = v - 1; ))) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat fork((print(v); (v = v - 1; ))) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat fork((print(v); (v = v - 1; ))) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat fork((print(v); (v = v - 1; ))) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat fork((print(v); (v = v - 1; ))) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat fork((print(v); (v = v - 1; ))) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat fork((print(v); (v = v - 1; ))) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat fork((print(v); (v = v - 1; ))) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat fork((print(v); (v = v - 1; ))) until(v == 3)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat fork((print(v); (v = v - 1; ))) until(v == 3)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork((print(v); (v = v - 1; ))); while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) })]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork((print(v); (v = v - 1; ))); while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) })]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { fork((print(v); (v = v - 1; ))) }]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@7af13b1a) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@a637230) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@4732c934) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); )))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); )))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); ))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); ))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); )))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); )))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); ))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); ))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); )))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (; (print(v * 10); )))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (; (print(v * 10); )))), while(Model.Expressions.NotExpression@605b19e2) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); ))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); ))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); ))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); )))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); )))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); )))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); )))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); ))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); ))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); )))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); )))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); )))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); )))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); ))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (y = 3; (print(v * 10); ))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (y = 3; (print(v * 10); ))), while(Model.Expressions.NotExpression@4a907a01) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@286de229) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(Model.Expressions.NotExpression@3f17485c) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork((print(v); (v = v - 1; ))); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork((print(v); (v = v - 1; ))); v = v + 1); while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, (fork((print(v); (v = v - 1; ))); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1, fork((print(v); (v = v - 1; )))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(print(v); (v = v - 1; ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork((print(v); (v = v - 1; ))); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; ), print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [(v = v - 1; )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); )))))]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); )))))]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); )))), x = 1]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); )))), x = 1]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); ))))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); ))))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); ))), ]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); ))), ]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); )))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); )))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); )), y = 3]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); )), y = 3]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); ))]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); ))]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); ), ]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); ), ]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); )]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); )]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [, print(v * 10)]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [, print(v * 10)]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2, 30]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2, 30]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2, 30]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); )))))]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); )))))]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); )))), x = 1]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); )))), x = 1]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); ))))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); ))))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); ))), ]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); ))), ]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); )))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); )))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); )), y = 3]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); )), y = 3]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); ))]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); ))]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); ), ]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); ), ]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); )]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); )]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [, print(v * 10)]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [, print(v * 10)]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2, 30]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2, 30]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2, 30]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v int; (x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))))]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))), v int]
SymTable: {}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x int; (y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))))]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))), x int]
SymTable: {v->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y int; (v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))))]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))), y int]
SymTable: {v->(0), x->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(v = 0; (repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); )))))), v = 0]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3); (x = 1; (; (y = 3; (; (print(v * 10); ))))))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), repeat (fork(((print(v); v = v - 1); )); v = v + 1) until(v == 3)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), ((fork(((print(v); v = v - 1); )); v = v + 1); while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) })]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(0), x->(0), y->(0)}
Output List: []
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(-1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, (fork(((print(v); v = v - 1); )); v = v + 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1, fork(((print(v); v = v - 1); ))]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }, v = v + 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [((print(v); v = v - 1); )]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(0), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); ))))), (fork(((print(v); v = v - 1); )); v = v + 1), while(not(v == 3)) { (fork(((print(v); v = v - 1); )); v = v + 1) }]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, (print(v); v = v - 1)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); )))))]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(x = 1; (; (y = 3; (; (print(v * 10); )))))]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1, print(v)]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); )))), x = 1]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); )))), x = 1]
SymTable: {v->(3), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: [, v = v - 1]
SymTable: {v->(2), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); ))))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (y = 3; (; (print(v * 10); ))))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); ))), ]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 2 
Execution Stack: []
SymTable: {v->(1), x->(0), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); ))), ]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); )))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(y = 3; (; (print(v * 10); )))]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); )), y = 3]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); )), y = 3]
SymTable: {v->(3), x->(1), y->(0)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); ))]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(; (print(v * 10); ))]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); ), ]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); ), ]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); )]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [(print(v * 10); )]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [, print(v * 10)]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: [, print(v * 10)]
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2, 30]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2, 30]
FileTable: []
Heap: {}

Program state:
ID: 1 
Execution Stack: []
SymTable: {v->(3), x->(1), y->(3)}
Output List: [0, 1, 2, 30]
FileTable: []
Heap: {}

